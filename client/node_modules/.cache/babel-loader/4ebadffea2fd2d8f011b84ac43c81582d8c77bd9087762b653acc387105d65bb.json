{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangm\\\\Documents\\\\face-recognition\\\\client\\\\src\\\\components\\\\profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-hot-toast'; // Import toast for alerts\nimport '../styles/profile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [userData, setUserData] = useState({\n    username: '',\n    email: '',\n    profileImage: '/images/avatar.png'\n  });\n  const [passwordData, setPasswordData] = useState({\n    password: '',\n    confirmPassword: ''\n  });\n  const [originalData, setOriginalData] = useState({}); // Store original data\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/user/profile', {\n          headers: {\n            Authorization: token ? `Bearer ${token}` : ''\n          }\n        });\n        setUserData(response.data);\n        setOriginalData(response.data); // Initialize original data\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  const handleUpdatePersonalInfo = async e => {\n    e.preventDefault();\n\n    // Filter out unchanged fields\n    const updatedFields = {};\n    Object.keys(userData).forEach(key => {\n      if (userData[key] !== originalData[key]) {\n        updatedFields[key] = userData[key];\n      }\n    });\n    if (Object.keys(updatedFields).length === 0) {\n      return toast('No changes detected', {\n        icon: '⚠️'\n      });\n    }\n    try {\n      const token = localStorage.getItem('token');\n\n      // Check for unique email and username\n      const uniqueCheckResponse = await axios.post('http://localhost:5000/user/validate', {\n        username: userData.username,\n        email: userData.email\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!uniqueCheckResponse.data.isUnique) {\n        return toast.error('Username or email is already in use');\n      }\n\n      // Proceed to update only the changed fields\n      await axios.put('http://localhost:5000/user/profile/update', updatedFields, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success('Profile updated successfully!');\n      setOriginalData(userData); // Update original data\n    } catch (error) {\n      console.error('Error updating profile info:', error);\n      toast.error('Failed to update profile info');\n    }\n  };\n  const handleUpdateSecurityInfo = async e => {\n    e.preventDefault();\n    if (passwordData.password.length < 6) {\n      return toast.error('Password should be at least 6 characters long');\n    }\n    if (passwordData.password !== passwordData.confirmPassword) {\n      return toast.error('Passwords do not match!');\n    }\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put('http://localhost:5000/user/profile/security', {\n        password: passwordData.password\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      toast.success('Password updated successfully!');\n      setPasswordData({\n        password: '',\n        confirmPassword: ''\n      });\n    } catch (error) {\n      console.error('Error updating password:', error);\n      toast.error('Failed to update password');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_s(Profile, \"WighYLGzkiuSBMsSNnjxRfqlsR0=\", false, function () {\n  return [useNavigate];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","toast","jsxDEV","_jsxDEV","Profile","_s","userData","setUserData","username","email","profileImage","passwordData","setPasswordData","password","confirmPassword","originalData","setOriginalData","navigate","fetchUserData","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","handleUpdatePersonalInfo","e","preventDefault","updatedFields","Object","keys","forEach","key","length","icon","uniqueCheckResponse","post","isUnique","put","success","handleUpdateSecurityInfo","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sangm/Documents/face-recognition/client/src/components/profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-hot-toast'; // Import toast for alerts\nimport '../styles/profile.css';\n\nconst Profile = () => {\n  const [userData, setUserData] = useState({\n    username: '',\n    email: '',\n    profileImage: '/images/avatar.png',\n  });\n  const [passwordData, setPasswordData] = useState({\n    password: '',\n    confirmPassword: '',\n  });\n  const [originalData, setOriginalData] = useState({}); // Store original data\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/user/profile', {\n          headers: { Authorization: token ? `Bearer ${token}` : '' },\n        });\n        setUserData(response.data);\n        setOriginalData(response.data); // Initialize original data\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n\n  const handleUpdatePersonalInfo = async (e) => {\n    e.preventDefault();\n\n    // Filter out unchanged fields\n    const updatedFields = {};\n    Object.keys(userData).forEach((key) => {\n      if (userData[key] !== originalData[key]) {\n        updatedFields[key] = userData[key];\n      }\n    });\n\n    if (Object.keys(updatedFields).length === 0) {\n      return toast('No changes detected', { icon: '⚠️' });\n    }\n\n    try {\n      const token = localStorage.getItem('token');\n\n      // Check for unique email and username\n      const uniqueCheckResponse = await axios.post(\n        'http://localhost:5000/user/validate',\n        { username: userData.username, email: userData.email },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      if (!uniqueCheckResponse.data.isUnique) {\n        return toast.error('Username or email is already in use');\n      }\n\n      // Proceed to update only the changed fields\n      await axios.put(\n        'http://localhost:5000/user/profile/update',\n        updatedFields,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      toast.success('Profile updated successfully!');\n      setOriginalData(userData); // Update original data\n    } catch (error) {\n      console.error('Error updating profile info:', error);\n      toast.error('Failed to update profile info');\n    }\n  };\n\n  const handleUpdateSecurityInfo = async (e) => {\n    e.preventDefault();\n\n    if (passwordData.password.length < 6) {\n      return toast.error('Password should be at least 6 characters long');\n    }\n    if (passwordData.password !== passwordData.confirmPassword) {\n      return toast.error('Passwords do not match!');\n    }\n\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put(\n        'http://localhost:5000/user/profile/security',\n        { password: passwordData.password },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      toast.success('Password updated successfully!');\n      setPasswordData({ password: '', confirmPassword: '' });\n    } catch (error) {\n      console.error('Error updating password:', error);\n      toast.error('Failed to update password');\n    }\n  };\n\n  return <div className=\"profile-container\">{/* Profile form elements */}</div>;\n};\n\nexport default Profile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}